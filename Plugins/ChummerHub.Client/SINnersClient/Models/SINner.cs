// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SINners.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class SINner
    {
        /// <summary>
        /// Initializes a new instance of the SINner class.
        /// </summary>
        public SINner()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SINner class.
        /// </summary>
        public SINner(string editionNumber = default(string), string myHash = default(string), string language = default(string), SINnerMetaData siNnerMetaData = default(SINnerMetaData), System.DateTime? lastDownload = default(System.DateTime?), SINnerGroup myGroup = default(SINnerGroup), string alias = default(string), System.Guid? id = default(System.Guid?), string downloadUrl = default(string), System.DateTime? uploadDateTime = default(System.DateTime?), System.DateTime? lastChange = default(System.DateTime?), string fileName = default(string))
        {
            EditionNumber = editionNumber;
            MyHash = myHash;
            Language = language;
            SiNnerMetaData = siNnerMetaData;
            LastDownload = lastDownload;
            MyGroup = myGroup;
            Alias = alias;
            Id = id;
            DownloadUrl = downloadUrl;
            UploadDateTime = uploadDateTime;
            LastChange = lastChange;
            FileName = fileName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "editionNumber")]
        public string EditionNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "myHash")]
        public string MyHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siNnerMetaData")]
        public SINnerMetaData SiNnerMetaData { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastDownload")]
        public System.DateTime? LastDownload { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "myGroup")]
        public SINnerGroup MyGroup { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "alias")]
        public string Alias { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "downloadUrl")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uploadDateTime")]
        public System.DateTime? UploadDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastChange")]
        public System.DateTime? LastChange { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EditionNumber != null)
            {
                if (EditionNumber.Length > 2)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "EditionNumber", 2);
                }
            }
            if (MyHash != null)
            {
                if (MyHash.Length > 8)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "MyHash", 8);
                }
            }
            if (Language != null)
            {
                if (Language.Length > 6)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Language", 6);
                }
            }
            if (MyGroup != null)
            {
                MyGroup.Validate();
            }
            if (Alias != null)
            {
                if (Alias.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Alias", 64);
                }
            }
        }
    }
}
