// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SINners.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SINnerSearchGroup
    {
        /// <summary>
        /// Initializes a new instance of the SINnerSearchGroup class.
        /// </summary>
        public SINnerSearchGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SINnerSearchGroup class.
        /// </summary>
        /// <param name="myAdminIdentityRole">Only users of the specified Role
        /// can join this group</param>
        public SINnerSearchGroup(IList<SINnerSearchGroup> mySINSearchGroups = default(IList<SINnerSearchGroup>), string errorText = default(string), IList<SINnerSearchGroupMember> myMembers = default(IList<SINnerSearchGroupMember>), bool? isFavorite = default(bool?), System.Guid? id = default(System.Guid?), System.Guid? myParentGroupId = default(System.Guid?), bool? isPublic = default(bool?), string groupCreatorUserName = default(string), SINnerGroupSetting mySettings = default(SINnerGroupSetting), string groupname = default(string), string passwordHash = default(string), bool? hasPassword = default(bool?), string description = default(string), string language = default(string), string myHash = default(string), IList<SINnerGroup> myGroups = default(IList<SINnerGroup>), string myAdminIdentityRole = default(string))
        {
            MySINSearchGroups = mySINSearchGroups;
            ErrorText = errorText;
            MyMembers = myMembers;
            IsFavorite = isFavorite;
            Id = id;
            MyParentGroupId = myParentGroupId;
            IsPublic = isPublic;
            GroupCreatorUserName = groupCreatorUserName;
            MySettings = mySettings;
            Groupname = groupname;
            PasswordHash = passwordHash;
            HasPassword = hasPassword;
            Description = description;
            Language = language;
            MyHash = myHash;
            MyGroups = myGroups;
            MyAdminIdentityRole = myAdminIdentityRole;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mySINSearchGroups")]
        public IList<SINnerSearchGroup> MySINSearchGroups { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errorText")]
        public string ErrorText { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "myMembers")]
        public IList<SINnerSearchGroupMember> MyMembers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isFavorite")]
        public bool? IsFavorite { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "myParentGroupId")]
        public System.Guid? MyParentGroupId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isPublic")]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "groupCreatorUserName")]
        public string GroupCreatorUserName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mySettings")]
        public SINnerGroupSetting MySettings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "groupname")]
        public string Groupname { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "passwordHash")]
        public string PasswordHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasPassword")]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "myHash")]
        public string MyHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "myGroups")]
        public IList<SINnerGroup> MyGroups { get; set; }

        /// <summary>
        /// Gets or sets only users of the specified Role can join this group
        /// </summary>
        [JsonProperty(PropertyName = "myAdminIdentityRole")]
        public string MyAdminIdentityRole { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MySINSearchGroups != null)
            {
                foreach (var element in MySINSearchGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (MyMembers != null)
            {
                foreach (var element1 in MyMembers)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Groupname != null)
            {
                if (Groupname.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Groupname", 64);
                }
            }
            if (Language != null)
            {
                if (Language.Length > 6)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Language", 6);
                }
            }
            if (MyHash != null)
            {
                if (MyHash.Length > 8)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "MyHash", 8);
                }
            }
            if (MyGroups != null)
            {
                foreach (var element2 in MyGroups)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (MyAdminIdentityRole != null)
            {
                if (MyAdminIdentityRole.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "MyAdminIdentityRole", 64);
                }
            }
        }
    }
}
