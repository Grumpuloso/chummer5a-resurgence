// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SINners.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Tag
    {
        /// <summary>
        /// Initializes a new instance of the Tag class.
        /// </summary>
        public Tag()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Tag class.
        /// </summary>
        /// <param name="tagComment">This has NO FUNCTION and is only here for
        /// Debugging reasons.</param>
        /// <param name="tagType">Possible values include: 'list', 'bool',
        /// 'int', 'Guid', 'string', 'double', 'binary', 'enum', 'other',
        /// 'unknown'</param>
        public Tag(System.Guid? id = default(System.Guid?), string tagName = default(string), string tagValue = default(string), double? tagValueFloat = default(double?), string tagComment = default(string), System.Guid? parentTagId = default(System.Guid?), System.Guid? siNnerId = default(System.Guid?), IList<Tag> tags = default(IList<Tag>), bool? isUserGenerated = default(bool?), string tagType = default(string))
        {
            Id = id;
            TagName = tagName;
            TagValue = tagValue;
            TagValueFloat = tagValueFloat;
            TagComment = tagComment;
            ParentTagId = parentTagId;
            SiNnerId = siNnerId;
            Tags = tags;
            IsUserGenerated = isUserGenerated;
            TagType = tagType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tagName")]
        public string TagName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tagValue")]
        public string TagValue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tagValueFloat")]
        public double? TagValueFloat { get; set; }

        /// <summary>
        /// Gets or sets this has NO FUNCTION and is only here for Debugging
        /// reasons.
        /// </summary>
        [JsonProperty(PropertyName = "tagComment")]
        public string TagComment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentTagId")]
        public System.Guid? ParentTagId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siNnerId")]
        public System.Guid? SiNnerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<Tag> Tags { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isUserGenerated")]
        public bool? IsUserGenerated { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'list', 'bool', 'int',
        /// 'Guid', 'string', 'double', 'binary', 'enum', 'other', 'unknown'
        /// </summary>
        [JsonProperty(PropertyName = "tagType")]
        public string TagType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TagName != null)
            {
                if (TagName.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TagName", 64);
                }
            }
            if (TagValue != null)
            {
                if (TagValue.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TagValue", 64);
                }
            }
            if (TagComment != null)
            {
                if (TagComment.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TagComment", 64);
                }
            }
            if (Tags != null)
            {
                foreach (var element in Tags)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
