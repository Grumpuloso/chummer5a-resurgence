// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace SINners
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SINnersClient.
    /// </summary>
    public static partial class SINnersClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResultAccountGetPossibleRoles GetPossibleRoles(this ISINnersClient operations)
            {
                return operations.GetPossibleRolesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultAccountGetPossibleRoles> GetPossibleRolesAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPossibleRolesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResultAccountGetRoles GetRoles(this ISINnersClient operations)
            {
                return operations.GetRolesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultAccountGetRoles> GetRolesAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRolesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            public static ResultAccountGetUserByEmail GetUserByEmail(this ISINnersClient operations, string email = default(string))
            {
                return operations.GetUserByEmailAsync(email).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultAccountGetUserByEmail> GetUserByEmailAsync(this ISINnersClient operations, string email = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByEmailWithHttpMessagesAsync(email, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='startIpAddress'>
            /// </param>
            /// <param name='endIpAddress'>
            /// </param>
            public static string GetAddSqlDbUser(this ISINnersClient operations, string username = default(string), string password = default(string), string startIpAddress = default(string), string endIpAddress = default(string))
            {
                return operations.GetAddSqlDbUserAsync(username, password, startIpAddress, endIpAddress).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='startIpAddress'>
            /// </param>
            /// <param name='endIpAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetAddSqlDbUserAsync(this ISINnersClient operations, string username = default(string), string password = default(string), string startIpAddress = default(string), string endIpAddress = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAddSqlDbUserWithHttpMessagesAsync(username, password, startIpAddress, endIpAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userrole'>
            /// </param>
            public static ApplicationUser PostSetUserRole(this ISINnersClient operations, string email = default(string), string userrole = default(string))
            {
                return operations.PostSetUserRoleAsync(email, userrole).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userrole'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationUser> PostSetUserRoleAsync(this ISINnersClient operations, string email = default(string), string userrole = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSetUserRoleWithHttpMessagesAsync(email, userrole, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResultAccountGetUserByAuthorization GetUserByAuthorization(this ISINnersClient operations)
            {
                return operations.GetUserByAuthorizationAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultAccountGetUserByAuthorization> GetUserByAuthorizationAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserByAuthorizationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetDeleteAllSINnersDb(this ISINnersClient operations)
            {
                return operations.GetDeleteAllSINnersDbAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetDeleteAllSINnersDbAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeleteAllSINnersDbWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetDeleteAndRecreateDb(this ISINnersClient operations)
            {
                return operations.GetDeleteAndRecreateDbAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetDeleteAndRecreateDbAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeleteAndRecreateDbWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for Sinners for one user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResultAccountGetSinnersByAuthorization GetSINnersByAuthorization(this ISINnersClient operations)
            {
                return operations.GetSINnersByAuthorizationAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for Sinners for one user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultAccountGetSinnersByAuthorization> GetSINnersByAuthorizationAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSINnersByAuthorizationWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResultGroupGetSearchGroups GetSinnerAsAdmin(this ISINnersClient operations)
            {
                return operations.GetSinnerAsAdminAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupGetSearchGroups> GetSinnerAsAdminAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSinnerAsAdminWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static bool? Logout(this ISINnersClient operations)
            {
                return operations.LogoutAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> LogoutAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogoutWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hash'>
            /// </param>
            /// <param name='open'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void O(this ISINnersClient operations, string hash, string open = default(string), string apiVersion = default(string))
            {
                operations.OAsync(hash, open, apiVersion).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hash'>
            /// </param>
            /// <param name='open'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OAsync(this ISINnersClient operations, string hash, string open = default(string), string apiVersion = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OWithHttpMessagesAsync(hash, open, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hash'>
            /// </param>
            /// <param name='open'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void G(this ISINnersClient operations, string hash, string open = default(string), string apiVersion = default(string))
            {
                operations.GAsync(hash, open, apiVersion).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hash'>
            /// </param>
            /// <param name='open'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GAsync(this ISINnersClient operations, string hash, string open = default(string), string apiVersion = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GWithHttpMessagesAsync(hash, open, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hash'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            public static void Open(this ISINnersClient operations, string hash, string apiVersion = default(string))
            {
                operations.OpenAsync(hash, apiVersion).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hash'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task OpenAsync(this ISINnersClient operations, string hash, string apiVersion = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.OpenWithHttpMessagesAsync(hash, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ChummerHubVersion GetVersion(this ISINnersClient operations)
            {
                return operations.GetVersionAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ChummerHubVersion> GetVersionAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVersionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the Chummer-Save-File
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sinnerid'>
            /// </param>
            public static Stream GetDownloadFile(this ISINnersClient operations, System.Guid sinnerid)
            {
                return operations.GetDownloadFileAsync(sinnerid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the Chummer-Save-File
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sinnerid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> GetDownloadFileAsync(this ISINnersClient operations, System.Guid sinnerid, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.GetDownloadFileWithHttpMessagesAsync(sinnerid, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ResultSinnerGetSINnerGroupFromSINerById GetSINnerGroupFromSINerById(this ISINnersClient operations, System.Guid id)
            {
                return operations.GetSINnerGroupFromSINerByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultSinnerGetSINnerGroupFromSINerById> GetSINnerGroupFromSINerByIdAsync(this ISINnersClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSINnerGroupFromSINerByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ResultSinnerGetSINById GetSINById(this ISINnersClient operations, System.Guid id)
            {
                return operations.GetSINByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultSinnerGetSINById> GetSINByIdAsync(this ISINnersClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSINByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ResultSinnerGetSINnerVisibilityById GetSINnerVisibilityById(this ISINnersClient operations, System.Guid id)
            {
                return operations.GetSINnerVisibilityByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultSinnerGetSINnerVisibilityById> GetSINnerVisibilityByIdAsync(this ISINnersClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSINnerVisibilityByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ResultSinnerGetOwnedSINByAlias SinnerGetOwnedSINByAlias(this ISINnersClient operations, string id)
            {
                return operations.SinnerGetOwnedSINByAliasAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultSinnerGetOwnedSINByAlias> SinnerGetOwnedSINByAliasAsync(this ISINnersClient operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SinnerGetOwnedSINByAliasWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Xml or Zip File can be uploaded (knowing the previously stored Id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='uploadedFile'>
            /// </param>
            public static ResultSINnerPut PutSIN(this ISINnersClient operations, System.Guid id, Stream uploadedFile = default(Stream))
            {
                return operations.PutSINAsync(id, uploadedFile).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Xml or Zip File can be uploaded (knowing the previously stored Id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='uploadedFile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultSINnerPut> PutSINAsync(this ISINnersClient operations, System.Guid id, Stream uploadedFile = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutSINWithHttpMessagesAsync(id, uploadedFile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sINnerId'>
            /// </param>
            /// <param name='index'>
            /// </param>
            public static void GetThumbnailById(this ISINnersClient operations, System.Guid? sINnerId = default(System.Guid?), int? index = default(int?))
            {
                operations.GetThumbnailByIdAsync(sINnerId, index).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sINnerId'>
            /// </param>
            /// <param name='index'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetThumbnailByIdAsync(this ISINnersClient operations, System.Guid? sINnerId = default(System.Guid?), int? index = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetThumbnailByIdWithHttpMessagesAsync(sINnerId, index, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Store the MetaData for chummerfiles (to get a Id).
            /// This Id can be used to store the actual file with PUT afterwards.
            /// Alternativly, the DownloadUrl can be set directly from the Client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadInfo'>
            /// </param>
            public static ResultSinnerPostSIN PostSIN(this ISINnersClient operations, UploadInfoObject uploadInfo = default(UploadInfoObject))
            {
                return operations.PostSINAsync(uploadInfo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store the MetaData for chummerfiles (to get a Id).
            /// This Id can be used to store the actual file with PUT afterwards.
            /// Alternativly, the DownloadUrl can be set directly from the Client.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uploadInfo'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultSinnerPostSIN> PostSINAsync(this ISINnersClient operations, UploadInfoObject uploadInfo = default(UploadInfoObject), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostSINWithHttpMessagesAsync(uploadInfo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ResultSinnerDelete Delete(this ISINnersClient operations, System.Guid id)
            {
                return operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultSinnerDelete> DeleteAsync(this ISINnersClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Store the new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='groupname'>
            /// In case you want to rename the group
            /// </param>
            /// <param name='parentGroupId'>
            /// </param>
            /// <param name='adminIdentityRole'>
            /// </param>
            /// <param name='isPublicVisible'>
            /// </param>
            public static ResultGroupPutGroupInGroup PutGroupInGroup(this ISINnersClient operations, System.Guid? groupId = default(System.Guid?), string groupname = default(string), System.Guid? parentGroupId = default(System.Guid?), string adminIdentityRole = default(string), bool? isPublicVisible = default(bool?))
            {
                return operations.PutGroupInGroupAsync(groupId, groupname, parentGroupId, adminIdentityRole, isPublicVisible).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store the new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='groupname'>
            /// In case you want to rename the group
            /// </param>
            /// <param name='parentGroupId'>
            /// </param>
            /// <param name='adminIdentityRole'>
            /// </param>
            /// <param name='isPublicVisible'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupPutGroupInGroup> PutGroupInGroupAsync(this ISINnersClient operations, System.Guid? groupId = default(System.Guid?), string groupname = default(string), System.Guid? parentGroupId = default(System.Guid?), string adminIdentityRole = default(string), bool? isPublicVisible = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutGroupInGroupWithHttpMessagesAsync(groupId, groupname, parentGroupId, adminIdentityRole, isPublicVisible, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Xml or Zip File can be uploaded (knowing the previously stored Id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='uploadedFile'>
            /// </param>
            public static ResultGroupPutSetting PutGroupSetting(this ISINnersClient operations, System.Guid id, Stream uploadedFile = default(Stream))
            {
                return operations.PutGroupSettingAsync(id, uploadedFile).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Xml or Zip File can be uploaded (knowing the previously stored Id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='uploadedFile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupPutSetting> PutGroupSettingAsync(this ISINnersClient operations, System.Guid id, Stream uploadedFile = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutGroupSettingWithHttpMessagesAsync(id, uploadedFile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Store the new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mygroup'>
            /// </param>
            /// <param name='sinnerId'>
            /// </param>
            public static ResultGroupPostGroup PostGroup(this ISINnersClient operations, SINnerGroup mygroup = default(SINnerGroup), System.Guid? sinnerId = default(System.Guid?))
            {
                return operations.PostGroupAsync(mygroup, sinnerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store the new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='mygroup'>
            /// </param>
            /// <param name='sinnerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupPostGroup> PostGroupAsync(this ISINnersClient operations, SINnerGroup mygroup = default(SINnerGroup), System.Guid? sinnerId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostGroupWithHttpMessagesAsync(mygroup, sinnerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Store the new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='sinnerId'>
            /// </param>
            /// <param name='pwhash'>
            /// </param>
            public static object PutSINerInGroup(this ISINnersClient operations, System.Guid? groupId = default(System.Guid?), System.Guid? sinnerId = default(System.Guid?), string pwhash = default(string))
            {
                return operations.PutSINerInGroupAsync(groupId, sinnerId, pwhash).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store the new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='sinnerId'>
            /// </param>
            /// <param name='pwhash'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutSINerInGroupAsync(this ISINnersClient operations, System.Guid? groupId = default(System.Guid?), System.Guid? sinnerId = default(System.Guid?), string pwhash = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutSINerInGroupWithHttpMessagesAsync(groupId, sinnerId, pwhash, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for Groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupid'>
            /// </param>
            public static ResultGroupGetGroupById GetGroupById(this ISINnersClient operations, System.Guid? groupid = default(System.Guid?))
            {
                return operations.GetGroupByIdAsync(groupid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for Groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupGetGroupById> GetGroupByIdAsync(this ISINnersClient operations, System.Guid? groupid = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupByIdWithHttpMessagesAsync(groupid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for public Groups (without authorization)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupname'>
            /// </param>
            /// <param name='language'>
            /// </param>
            public static ResultGroupGetSearchGroups GetPublicGroup(this ISINnersClient operations, string groupname = default(string), string language = default(string))
            {
                return operations.GetPublicGroupAsync(groupname, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for public Groups (without authorization)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupname'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupGetSearchGroups> GetPublicGroupAsync(this ISINnersClient operations, string groupname = default(string), string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublicGroupWithHttpMessagesAsync(groupname, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for Groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupname'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='password'>
            /// </param>
            public static ResultGroupGetSearchGroups GetGroupmembers(this ISINnersClient operations, string groupname = default(string), string language = default(string), string email = default(string), string password = default(string))
            {
                return operations.GetGroupmembersAsync(groupname, language, email, password).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for Groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupname'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='password'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupGetSearchGroups> GetGroupmembersAsync(this ISINnersClient operations, string groupname = default(string), string language = default(string), string email = default(string), string password = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupmembersWithHttpMessagesAsync(groupname, language, email, password, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for Groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupname'>
            /// </param>
            /// <param name='usernameOrEmail'>
            /// </param>
            /// <param name='sINnerName'>
            /// </param>
            /// <param name='language'>
            /// </param>
            public static ResultGroupGetSearchGroups GetSearchGroups(this ISINnersClient operations, string groupname = default(string), string usernameOrEmail = default(string), string sINnerName = default(string), string language = default(string))
            {
                return operations.GetSearchGroupsAsync(groupname, usernameOrEmail, sINnerName, language).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for Groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupname'>
            /// </param>
            /// <param name='usernameOrEmail'>
            /// </param>
            /// <param name='sINnerName'>
            /// </param>
            /// <param name='language'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupGetSearchGroups> GetSearchGroupsAsync(this ISINnersClient operations, string groupname = default(string), string usernameOrEmail = default(string), string sINnerName = default(string), string language = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchGroupsWithHttpMessagesAsync(groupname, usernameOrEmail, sINnerName, language, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a sinner from a group. If this sinner is the last member of it's
            /// group, the group will be deleted as well!
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupid'>
            /// </param>
            /// <param name='sinnerid'>
            /// </param>
            public static bool? DeleteLeaveGroup(this ISINnersClient operations, System.Guid? groupid = default(System.Guid?), System.Guid? sinnerid = default(System.Guid?))
            {
                return operations.DeleteLeaveGroupAsync(groupid, sinnerid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a sinner from a group. If this sinner is the last member of it's
            /// group, the group will be deleted as well!
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupid'>
            /// </param>
            /// <param name='sinnerid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteLeaveGroupAsync(this ISINnersClient operations, System.Guid? groupid = default(System.Guid?), System.Guid? sinnerid = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteLeaveGroupWithHttpMessagesAsync(groupid, sinnerid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Group (recursive - only Admins can do that)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupid'>
            /// </param>
            public static bool? DeleteGroup(this ISINnersClient operations, System.Guid? groupid = default(System.Guid?))
            {
                return operations.DeleteGroupAsync(groupid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Group (recursive - only Admins can do that)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeleteGroupAsync(this ISINnersClient operations, System.Guid? groupid = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupWithHttpMessagesAsync(groupid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search for all members and subgroups of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupid'>
            /// </param>
            public static ResultGroupGetSearchGroups GetGroupmembersById(this ISINnersClient operations, System.Guid? groupid = default(System.Guid?))
            {
                return operations.GetGroupmembersByIdAsync(groupid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search for all members and subgroups of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultGroupGetSearchGroups> GetGroupmembersByIdAsync(this ISINnersClient operations, System.Guid? groupid = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupmembersByIdWithHttpMessagesAsync(groupid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTag'>
            /// </param>
            public static IList<SINner> Search(this ISINnersClient operations, SearchTag searchTag = default(SearchTag))
            {
                return operations.SearchAsync(searchTag).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTag'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SINner>> SearchAsync(this ISINnersClient operations, SearchTag searchTag = default(SearchTag), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(searchTag, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<SINner> AdminGetSINners(this ISINnersClient operations)
            {
                return operations.AdminGetSINnersAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SINner>> AdminGetSINnersAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdminGetSINnersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<UploadClient> GetSomeTestUploadClients(this ISINnersClient operations)
            {
                return operations.GetSomeTestUploadClientsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UploadClient>> GetSomeTestUploadClientsAsync(this ISINnersClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSomeTestUploadClientsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void GetUploadClient(this ISINnersClient operations, System.Guid id)
            {
                operations.GetUploadClientAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetUploadClientAsync(this ISINnersClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetUploadClientWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void GetSINners(this ISINnersClient operations, System.Guid id)
            {
                operations.GetSINnersAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetSINnersAsync(this ISINnersClient operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetSINnersWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
